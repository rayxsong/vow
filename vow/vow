#!/usr/bin/env python3
import subprocess
import sys
from openai import OpenAI
from dotenv import load_dotenv
import os
import shlex
import time
import threading
import itertools


load_dotenv()

def spinner(stop_event):
    for cursor in itertools.cycle('|/-\\'):
        if stop_event.is_set():
            break
        sys.stdout.write(cursor)
        sys.stdout.flush()
        sys.stdout.write('\b')
        time.sleep(0.1)

def run_command(command):
    try:
        # Run the command and capture output
        result = subprocess.run(command, shell=True, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        print(result.stdout)
    except subprocess.CalledProcessError as e:
        print(f"Error: {e.stderr}")

def get_input():
    command = ""
    if len(sys.argv) > 1:
        command = shlex.join(sys.argv[1:])
        return command
    else:
        print("No command provided.")
        return None

def main():

    client = OpenAI(
        api_key= os.getenv("OPENAI_API_KEY"),
    )

    user_input = get_input()
    if user_input is not None and "exit" in user_input.split():
        exit()

    raw_input = "Give me the command to run:" + user_input + "in MacOS terminal, give me the output directly without any explaination in one line."
    stop_event = threading.Event()
    spinner_thread = threading.Thread(target=spinner, args=(stop_event,))
    spinner_thread.start()

    try:
        completion = client.chat.completions.create(
            messages=[
                {
                    "role": "user",
                    "content": raw_input,
                }
            ],
            model="gpt-4",
        )
        raw_output = completion.choices[0].message.content
    except Exception as e:
        print(f"API error: {e}")
        return
    
    stop_event.set()
    spinner_thread.join()
    
    print("The following command will run: ")
    print("================================")
    print(raw_output)
    print("================================")
    print("Are you sure to run? (y/n)")
    if input() == "y":
        print("Here is the result after running:")
        print("================================")
        run_command(raw_output)
        # check if raw_output contains "rm"
        if "rm" in raw_output.split():
            print("Remove excuted.")
    else:
        print("================================")
        print("Command cancelled.")

if __name__ == "__main__":
    main()